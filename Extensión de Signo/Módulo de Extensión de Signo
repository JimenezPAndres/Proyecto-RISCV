`timescale 1ns / 1ps



module Ext_Signo(

	 input wire [31:0] instruction,  //Recibe la información de la instrucción

	 input wire clk,

	 output reg [31:0] SE //Dato con extensión de signo

    );

	 

	 reg [19:0] offsetIS;	//Variable para cacular el offset

	 reg [19:0] offsetJ;

	 

	 initial begin

	 offsetIS<=20'b00000000000000000000;	//Se inicializa el offset

	 offsetJ<=0000000000000000000;

	 SE<=32'b0;

	 end

	 
	 
always @* begin

	case ({instruction[14:12],instruction[6:0]})

		19'b0100000011: begin //Se verifica que sea una operación I

			offsetIS=instruction[31:12];	//Se calcula el offset

			SE[11:0]=offsetIS[11:0];
			if (SE[11]==1) SE[31:12]=20'b11111111111111111111;
			else SE[31:12]=20'b00000000000000000000;

			end

		19'b0100100011: begin //Se verifica que sea una operación S

			offsetIS[11:5]=instruction[31:25];

			offsetIS[4:0]=instruction[11:7];

			SE[11:0]=offsetIS[11:0];
			if (SE[11]==1) SE[31:12]=20'b11111111111111111111;
			else SE[31:12]=20'b00000000000000000000;

			end
		19'b0000010011: begin //Se verifica que sea una operación I

			offsetIS=instruction[31:20];	//Se calcula el offset

			SE[11:0]=offsetIS[11:0];
			if (SE[11]==1) SE[31:12]=20'b11111111111111111111;
			else SE[31:12]=20'b00000000000000000000;

			end

	endcase

		//imm[20|10:1|11|19:12]

		case(instruction[6:0]) //Se verifica que sea una operación J

			7'b1101111: begin

				offsetJ[19]=instruction[31];

				offsetJ[9:0]=instruction[30:21];

				offsetJ[10]=instruction[20];

				offsetJ[18:11]=instruction[19:12];

				SE[19:0]=offsetJ[19:0];
				if (SE[19]==1) SE[31:12]=20'b11111111111111111111;
				else SE[31:20]=20'b00000000000000000000;

				end

			7'b0110111: begin //Se verifica que sea una operación U

				SE[31:12]=instruction[31:12];
				if (SE[11]==1) SE[31:12]=20'b11111111111111111111;
				else SE[31:12]=20'b00000000000000000000;

				end

		endcase		
end

endmodule
