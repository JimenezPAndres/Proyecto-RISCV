`timescale 1ns / 1ps

// Descripción: 
// Este módulo implementa una memoria de datos simple. Proporciona funcionalidades
// para leer y escribir datos en una memoria de 151 palabras de 32 bits. Además,
// genera un volcado de memoria en un archivo cuando la PC alcanza un valor 
// específico.
// Entradas:
// - address: Dirección de memoria de 32 bits donde se realizará la operación.
// - dataIn: Datos de entrada de 32 bits a escribir en la memoria.
// - MemWrite: Señal de control que habilita la escritura en la memoria.
// - clock: Señal de reloj para la operación síncrona de escritura.
// - PC: Contador de programa que, cuando alcanza un valor específico, activa 
// el volcado de la memoria.
// Salidas:
// - dataOut: Datos de salida de 32 bits leídos de la memoria.
// Razón de implementación:
// El módulo `DataMemory` es esencial en un sistema de procesamiento para 
// almacenar y recuperar datos durante la ejecución del programa. Proporciona 
// una forma de acceder a una memoria de datos y de registrar el estado de la 
// memoria en un archivo para fines de depuración.

module DataMemory(
    input [31:0] address,    // Dirección de memoria de 32 bits
    input [31:0] dataIn,     // Datos de entrada de 32 bits
    input MemWrite,          // Señal de control de escritura
    input clock,             // Señal de reloj
    input [31:0] PC,         // Contador de programa

    output reg [31:0] dataOut // Datos de salida de 32 bits
);

    // Memoria de datos de 151 palabras de 32 bits
    reg [31:0] memory [0:150];
    
    // Inicialización de la memoria a cero
    initial begin
        integer i;
        for (i = 0; i <= 150; i = i + 1) begin
            memory[i] = 32'h00000000;
        end
    end

    reg [7:0] addr;           // Dirección para el volcado de memoria
    integer file;             // Archivo para el volcado de memoria
    integer i;                // Índice para el volcado de memoria

    // Lectura asíncrona de la memoria
    always @* begin
        if (MemWrite == 0) begin
            dataOut <= memory[address];
        end
        
        // Volcado de memoria cuando PC es 17
        if (PC == 17) begin
            // Abrir el archivo para escribir
            addr = 0;
            file = $fopen("data_memory_dump.txt", "w");

            // Dump de la memoria
            $fdisplay(file, "Dump de memoria de datos:");
            for (i = 0; i < 150; i = i + 1) begin
                addr = i;
                $fdisplay(file, "Direccion de Memoria %d: %h", addr, memory[i]);
            end

            // Cerrar el archivo
            $fclose(file);

            // Terminar la simulación
            $finish;
        end
    end

    // Escritura sincrónica de la memoria
    always @ (posedge clock) begin
        if (MemWrite == 1) begin
            memory[address] <= dataIn;
        end
    end

endmodule
