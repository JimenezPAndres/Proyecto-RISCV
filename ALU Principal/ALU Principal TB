//El objetivo de esta prueba es verificar que el módulo ALU_Principal funciona correctamente para
//todas las operaciones aritméticas y lógicas definidas (suma, XOR, AND, y desplazamiento lógico 
//a la derecha). 
//Estimulos:
//La secuencia en que se varían las señales de entrada del módulo es la siguiente:
//Inicialmente, realizar una suma.
//Cambiar la operación a XOR.
//Cambiar la operación a AND.
//Cambiar el segundo operando y realizar un desplazamiento lógico a la derecha.
//Resultados esperados:
//Para ALUOp = 00, la operación es una suma: Dato1 + Dato2.
//Para ALUOp = 01, la operación es un XOR: Dato1 ^ Dato2.
//Para ALUOp = 10, la operación es un AND: Dato1 & Dato2.
//Para ALUOp = 11, la operación es un desplazamiento lógico a la derecha: Dato1 >>> Dato2.


`timescale 1ns / 1ps

module ALU_Principal_tb;
	reg [1:0] ALUOp;
	reg [31:0] Dato1;
	reg [31:0] Dato2;
	reg clk;
	wire [31:0] Result;

	ALU_Principal ALU_Principal_tb (ALUOp,Dato1,Dato2,clk,Result);
	
	initial begin
	clk=0;
	ALUOp=00;//SUMA
	Dato1=32'h0000FFFF; //Primer dato de 32 bits para hacer la operación
	Dato2=32'h0000FFFF; //Segundo dato de 32 bits para hacer la operación
	
	#10 ALUOp=01;//XOR
	#10 ALUOp=10;//AND
	#10 Dato2=32'h2;//Cambio del segundo dato
	#10 ALUOp=11;//SAR
	end
	always #5 clk=~clk;
endmodule
