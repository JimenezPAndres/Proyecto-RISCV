module DataMemory(

    input [31:0] address,

    input [31:0] dataIn,

    input MemWrite,
	 input clock,

    output reg [31:0] dataOut

);



    //  memory array

    reg [31:0] memory [60:0];
	 initial begin

		memory[0] = 32'h00000000;

		memory[1] = 32'h00000000;

		memory[2] = 32'h00000000;

		memory[3] = 32'h00000000;

		memory[4] = 32'h00000000;

		memory[5] = 32'h00000000;

		memory[6] = 32'h00000000;

		memory[7] = 32'h00000000;

		memory[8] = 32'h00000000;

		memory[9] = 32'h00000000;

		memory[10] = 32'h00000000;

		memory[11] = 32'h00000000;

		memory[12] = 32'h00000000;

		memory[13] = 32'h00000000;

		memory[14] = 32'h00000000;

		memory[15] = 32'h00000000;

		memory[16] = 32'h00000000;

		memory[17] = 32'h00000000;

		memory[18] = 32'h00000000;

		memory[19] = 32'h00000000;

		memory[20] = 32'h00000000;

		memory[21] = 32'h00000000;

		memory[22] = 32'h00000000;

		memory[23] = 32'h00000000;

		memory[24] = 32'h00000000;

		memory[25] = 32'h00000000;

		memory[26] = 32'h00000000;

		memory[27] = 32'h00000000;

		memory[28] = 32'h00000000;

		memory[29] = 32'h00000000;

		memory[30] = 32'h00000000;

		memory[31] = 32'h00000000;

		memory[32] = 32'h00000000;

		memory[33] = 32'h00000000;

		memory[34] = 32'h00000000;

		memory[35] = 32'h00000000;

		memory[36] = 32'h00000000;

		memory[37] = 32'h00000000;

		memory[38] = 32'h00000000;

		memory[39] = 32'h00000000;

		memory[40] = 32'h00000000;

		memory[41] = 32'h00000000;

		memory[42] = 32'h00000000;

		memory[43] = 32'h00000000;

		memory[44] = 32'h00000000;

		memory[45] = 32'h00000000;

		memory[46] = 32'h00000000;

		memory[47] = 32'h00000000;

		memory[48] = 32'h00000000;

		memory[49] = 32'h00000000;

		memory[50] = 32'h00000000;

		memory[51] = 32'h00000000;

		memory[52] = 32'h00000000;

		memory[53] = 32'h00000000;

		memory[54] = 32'h00000000;

		memory[55] = 32'h00000000;

		memory[56] = 32'h00000000;

		memory[57] = 32'h00000000;

		memory[58] = 32'h00000000;

		memory[59] = 32'h00000000;

		memory[60] = 32'h00000000;
end

    // Read Asincrona

    always@*

    begin

        if (MemWrite==0)

            dataOut <= memory[2];

    end

    
	 

    // Write Sincrona

    always @ (posedge clock)

    begin

        if (MemWrite == 1)

            memory[address] <= dataIn;

    end



endmodule
